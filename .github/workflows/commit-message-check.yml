name: Check Commit Message Format

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  check-commit-message:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code with full history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get commit messages in PR range
        run: |
          echo "Fetching commit messages between base and head..."
          git fetch origin ${{ github.event.pull_request.base.ref }}

          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"

          echo "Base SHA: $BASE_SHA"
          echo "Head SHA: $HEAD_SHA"

          git log "$BASE_SHA..$HEAD_SHA" --pretty=format:%s > commit_messages.txt
          echo "Collected commit messages:"
          cat commit_messages.txt

      - name: Validate commit message format
        run: |
          echo "Validating commit message format..."
          PATTERN="^(STORY|BUG|TASK)/MAC-[0-9]+: .+"
          INVALID=0

          while IFS= read -r COMMIT_MSG; do
            if echo "$COMMIT_MSG" | grep -qE "^Merge [a-f0-9]{7,} into [a-f0-9]{7,}$"; then
              echo "‚ÑπÔ∏è Skipping merge commit: '$COMMIT_MSG'"
              continue
            fi

            if ! echo "$COMMIT_MSG" | grep -Eq "$PATTERN"; then
              echo "‚ùå Invalid commit message: '$COMMIT_MSG'"
              echo "‚úÖ Expected: STORY|BUG|TASK/MAC-<number>: <message>"
              echo "üí° Example: TASK/MAC-1234: Add login feature"
              INVALID=1
            else
              echo "‚úÖ Valid: '$COMMIT_MSG'"
            fi
          done < commit_messages.txt

          if [ "$INVALID" -eq 1 ]; then
            echo "üî¥ Commit message format check failed."
            exit 1
          else
            echo "üü¢ All commit messages are valid!"
          fi
